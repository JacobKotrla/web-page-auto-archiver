2018-08-29	v0.0.1		I copied the completed Getting Started Example and removed background.js. I also changed the name to Internet Archive Extension. I updated the manifest, but no other files yet.
2018-08-30	v0.0.2		I added jQuery and modified all files in the program. I added the permissions "activeTab", "declarativecontent", and "storage".
2018-09-04	v0.0.3		I made the options and stats buttons actually link to something.
2018-09-05	v0.0.4		I am testing storing data using the statistics page.
2018-09-06	v0.0.5		I am still testing data storage; I made some progress.
2018-09-10	v0.0.6		I finally managed to store data, but it is not yet automatic.
2018-09-11	v0.0.7		I changed the function that loads the stats from using the variable pagesAutomaticallyArchived["pages-automatically-archived"] to statistics["pages-automatically-archived"]. For some reason, data loaded when the web page refreshes does not stay on the page, so you have to press the button to load it.
2018-09-13	v0.0.8		I moved the stats loading code to a function, and now it loads upon reload. ¯\_(ツ)_/¯
2018-09-14	v0.0.9		I am experimenting with the Wayback Machine API.
2018-09-20	v0.0.10		I need permissions to use APIs.
2018-09-21	v0.0.11		API experiments
2018-09-24	v0.0.12		API experiments
2018-09-25	v0.1.0		It turns out the problems I've been having with APIs actually were caused by a failure of console.log(). console.log() from the popup can only be seen by right clicking and navigating to "Inspect Popup". I added a new icon, changing it from a solid white box to a brain from "Free icons" (https://www.iconfinder.com/freeicons.io). this icon is not final, but I need a shape so that I can see where my extension is in the taskbar.
2018-09-26	v0.1.1		I added the "tabs" permission because I believe it will help me get the URL of the tabs. I added a background script because I believe this is how I will listen for tabs being updated.
2018-09-27	v0.1.2		Updating a tab now increments the counter.
2018-09-28	v0.1.3		I am experimenting with getting the id of the tabs created. My plan is to arrange all existing tabs into an array so that the extension can work through all of the tabs even if the tab is not the highlighted tab.
2018-10-01	v0.1.4		I created the openTabs array for storing the ids of the currently open tabs, and for storing the URLs. On second thought, maybe I should just store the URLs. I should store every new URL and archive them even if the user closes the tabs.
2018-10-02	v0.1.5		I replaced openTabs with URLs, which only stores URLs and archives all of them. at the moment, since nothing is actually being archived, being inactive for a while makes the background page inactive and clears the URL list, so my next step is to store that locally permanently.
2018-10-03	v0.1.6		progress
2018-10-04	v0.1.7		I added two new arrays: archivedURLs and failedURLs. I fixed a typo. I'm getting an incorrect method error.
2018-10-05	v0.1.8		I tried to fix some things in my request, but it didn't seem to fix anything. The error code changed from 405 Method not allowed on the website and in the extension, to 400 bad request in the extension and 504 Gateway Time-out on the website.
2018-10-09	v0.1.9		I adjusted the format of my XMLHttpRequest, but to no avail.
2018-10-10	v0.1.10		I was the only one in class today, except for a few students who walked in and then out once they realized no teacher was present. I managed to change the error to "net::ERR_FILE_NOT_FOUND".
2018-10-11	v0.2.0		The project is due tommorrow. I have greatly reduced the scope of this project, trimming out the groundwork for many unneccessary features, including statistics, settings, and the popup. No configuration is needed on the user side. Additionally, I tweaked the API call again and I am no longer getting errors, but the API doesn't seem to be actually archiving anything either.
2018-10-12	v0.3.0		I restructured my API call again, and now it finally works! I accidentally put GET instead of POST and that fixed the problem.
2018-10-12	v0.3.1		I implemented a check to make sure API calls are not sent more than once per second, and tried to implement a check that makes sure only one call is processing at a time, but the API calls process so fast this is hard to test.